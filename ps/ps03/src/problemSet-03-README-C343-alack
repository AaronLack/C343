Task A:
Static array removeAt()
Best Case: O(1)
Worst Case: O(1)
Average Case: O(1)

Dynamic array removeAt()
Best Case: O(1)
Worst Case: O(n)
Average Case:O(n/2)

The drawbacks of using static removeAt is that data values are replaced with null, and it is kind of wierd to have a
list in real life where you have a bunch of "nulls" when they can just be deleted. This is more important when you have
a list and you have a ton of zero or null values, you only want the non-null values to display. The drawbacks of the
dynamic removeAt is that it is less cost efficient, but you only get the elements that you need from this algorithm
which is really nice. An example where the first version would be desirable is if you have a smaller list where having a
null data value makes sense, such as attendance for a class.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Part B:
1.
List <|2, 23, 15, 5, 9>.
Series of Java statements used to delete 15, using List ADT from
public static void main(String[] args) {
    int[] arr = new int{2,23,15,5,9};
    ListTest adt = new ListTest(arr)
    adt.mvGToBeg()
    adt.goNext()
    adt.goNext()
    adt.currPos()
    adt.remove()
}

2. Break even point inequality: n > DE/P+E
a.
D = 20 elements
E = 8 bytes
P = 4 bytes, pointer
20*8/4+8 = 160/12 =13.33 --> 14 so round up
Break even point is when there are 13.33 elements in list.
When n > 13.33, you need 14 elements, since you cant have 1/3 of an element. So n is 14.

b.
D = 30 elements
E = 2 bytes
P = 4 bytes
30*2/4+2 = 10 --> 11 if you round up
Break even point is when there are 10 elements in the list
When n > 10, you need 11 elements, because n must be greater then 10. So n is 11.

c.
D = 30 elements
E = 1 byte
P = 4 bytes
30*1/4+1 = 6.
Break even point is when there are 6 elements in the list.
When n > 6, you n would be 7 because that is the next whole element larger then 6. So n is 7

d.
D = 40 elements
E = 32 bytes
P = 4 bytes
40*32/4+32 = 35.555 --> 36 if you round up
Break even point is when there are 35.555 elements in the list.
When n > 35.555, you need elements 36, since you can't have .5555 of an element. So n is 36.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Part C:
1. Slowest to Fastest:
2, log2(n), log3(n), 20n, n^(2/3), 4n^2, 3^n, n!
2 is constant so this grows the slowest
The next two are logarithmic, and log2(n) grows slower than log3(n) since base 2 < base 3
20n is constant, which is the next fastest
Then, n^2/3 grows the fastest next to 4n^2, which is exponential and the power 2/3 < 2, so n^2/3 grows slower than 4n^2.
Next, 3^n grows very fast as n increases
Finally, n! is the fastest growing function that is in our list.

2. Find Lower and Upper bounds for following expressions
a. c1n leads to O(n) because you can ignore the constant c, and n is the fastest growing term.
O(n) where c >= 1.1 is considered an upperbound for n.
Ω(n) where c =< .9 as a lowerbound for n.

Ask how to represent the actual growth rate to the upper and lower bound.

b. c2 n^3 + c3 leads to O(n^3) because you can ignore the constant c, and n^ is the fastest growing term.
O(n^4) where c >= 1 is considered an upperbound for n^3. So is even O(n^3) where c >= 1.1;
Ω(n^2) where c >= 1 as a lowerbound for n^3. So is even Ω(n^3) where c <= .9

c. c4 n log2n + c5 n leads to O(nlogn) because nlogn is the fastest growing term over n and for constants c4,c5
when n > 2
O(n^2) where c >= 1 is considered an upperbound for nlogn. So is even O(nlogn) where c >= 1.1
Ω(n) where c >= 1 as a lowerbound for nlogn. So is even Ω(nlogn) where c <= .9

d. c6 2^n + c7 n^6 leads to O(2^n) because 2^n is the fastest growing term over c6, c7*n6 when n>6. So those constants
can and n^6 be ignored.
O(3^n) is considered an upperbound for 2^n when n > 6.
Ω(1.5^n) is considered a lowerbound for 2^n when n > 6. So is even Ω(n^6) when n < 6.

3. Determine Θ in the average case.
sum = 0;
if (EVEN(n)) {
    for (i=0; i<n; i++) {
        sum++;
    }
}
else {
    sum = sum + n;
}

Θ(1+n/2) because the if statement determines if the value is even.
If it is even, it takes n. If it is odd, it takes one step.
Find the average of n and 1 --> 1+n/2. And therefore, Θ(1+n/2)