Aaron Lack alack C343 FA20 Problem Set 11 README

Describe how you figured out the probelem's here

TASK A:
1. Explain why, in the worst case, Dijkstra's algorithm is (asymptotically) as efficient as any algorithm for
finding the shortest path from some vertex i to another vertex j.

Dijstra's algorithm is pretty much as efficient as any shortest path algorithm because all of the algorithms
given nodes and weighted edges must compare every option, regardless of how it is implemented or done. In
Dijstra's you are always going to shortest path, so there are only so many ways you can do that, so the
running time will a stay consistent in the worst case scenerio.

2. Write down the table of the shortest paths generated by running Dijkstra's shortest paths algorithm, using
Vertex 4 as the source vertex s. In particular, write down the D values as each vertex is processed (in a
format similar as in Lecture 22 notes).

Table:
            1   2   3   4   5   6
Initial:    ∞   ∞   ∞   0   ∞   ∞
Process 4:  ∞   5   ∞   0   11  10
Process 2:  15  5   3   0   11  10
Process 3:  15  5   8   0   11  10
Process 6:  15  5   8   0   11  10
Process 5:  15  5   8   0   11  10
Process 1:  15  5   8   0   11  10

3. The Single-Destination shortest paths problem in a directed graph is defined as follows:
   Find the shortest path from every vertex to a specified vertex V.
   Write an algorithm to solve the single-destination shortest-paths problem.
   Note: you don't have to write any Java code in this answer: provide a solution in your own words, e.g. using pseudocode.
   However, you must properly acknowledge any helpful ideas you may find about this in external sources, the internet, etc.

When the destination is the shortest path in heap and you pop it, you don't have to go any further since you
already found it. There is no point checking out the other vertices because the table will be set up in a way
such that you can not visit certain nodes and you will still have the same distances.

4. It has been stated that Dijkstra's shortest paths algorithm does not always work on directed graphs that allow negative-weight edges.
   Provide an example of such a graph, and show that Dijkstra's algorithm produces incorrect results.
   Note: there are some graphs with negative-weight edges where Dijkstra's algorithm works correctly:
   your task is to find a negative-weight edges digraph where Dijkstra's algorithm doesn't work correctly.

If you have a graph A,B,C (a triangle) with the Adjacency List

A: B(2)
B: C(-10)
C: A(5)

If you wanted to use Dijstra's algorithm starting at A and ending at C, your options are going A-->B with a
cost of 2, and setting B to visited, or A-->C and setting C to visited with a cost of 5, this would be
incorrect because the shortest path is -8 From A-->B and B-->C but you cannot do this because of the set
visited method if you decide to explore A-->C directly.

Task B: Dikjstra1
I used the Schaffer Book as a reference to implement the methods needed for Dikjstra's Algorithm. I first made
 the edge relaxation method, which is a helper method to calculate the edges with the lowest weights given 2
 nodes. Then, I initialize the dist array and the startingVertex. I set the values of the starting vertex to 0
  and the rest to Integer.MAX_VAlUE. Then, call clearWalk() to make sure none of the verticies are visited. I
  print the inital dist array too. In the main loop, I iterate through the nodes and call the setVisited
  method on the node with the minimum value, which is called by the MinVertex method. I then write an enhanced
   for loop to get the neighbors of that minVertex, and call the edge relaxation method. I also have an edge
   case where if the value is equal to Integer.MAX_VAlUE, then that vertex isn't reachable, and I end the
   program. Finally, I print the dist array after each edge relaxation step.

Task C: Again, I used the Schaffer Book reading as a reference to implement this method. First, instantiate a
linked list for the result, a queue, and the dist array. I loop through the dist array and call the
getNeighbors function for the i. I write an enhanced for loop and make sure to update the dist array as well.
If the value of the dist array is 0, then I add that vertex to the queue. Then, in the main while loop where
the queue isn't empty, I keep track of a counter variable and I make a variable that removes elements in the
queue. I add that to the result linked list. I print the elements to show the topological sort and I remove
the particular vertex from the queue that was just added into the result linked list. I then write another
enhanced for loop and decrement the dist array, and make sure to write a condition that if it's 0, the add it
to the queue. Finally, I write one last condition where if the count variable I made is 0, then that means
that the element in the graph isn't found.

Main Method:
In my main method, I wanted to reuse graphs that worked for both Dikjstra's algorithm and TopSort, so I drew
mine out on paper. Dikjstra's algorithm only works for starting at node A because of the way I have my
directed graphs set up, but it still gives a correct output. Graph 3 is very similar to the one in figure
11.14 in the Shaffer book, because we needed to use that to test TopSort, and I added 3 verticies at the end
to fulfill the requirements.